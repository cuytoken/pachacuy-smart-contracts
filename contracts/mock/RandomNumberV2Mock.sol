// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "../vrf/CallbackInterface.sol";

contract RandomNumberV2Mock {
    /**
     * @dev Indicated the data after the Random Number has been generated by VRF
     * @param requestId The request id of the Chainlink VRF
     * @param smartCAddress Smart Contract who is calling the random number function
     * @param walletAddress Wallet address for which the random number is generated
     * @param randomWords Array of random words generated by the VRF
     */
    event RandomNumberFulfilled(
        uint256 requestId,
        address smartCAddress,
        address walletAddress,
        uint256[] randomWords
    );

    event ErrorFromVrfCallback(
        string error,
        uint256 requestId,
        address smartCAddress,
        address walletAddress
    );

    event ErrorNotHandled(
        bytes reason,
        uint256 requestId,
        address smartCAddress,
        address walletAddress
    );

    event RandomNumberDelivered(
        uint256 requestId,
        address smartCAddress,
        address walletAddress,
        uint256[] randomWords
    );

    address _smartc;
    address account;

    function requestRandomNumber(address _account) external {
        _smartc = msg.sender;
        account = _account;
    }

    /**
     * @dev Consumed by the Client to request a random number
     */
    function requestRandomNumber(address _account, uint32) external {
        _smartc = msg.sender;
        account = _account;
    }

    function verifyIfRequestHasBeenCalled(address _sc)
        external
        view
        returns (bool)
    {
        return _sc == _smartc;
    }

    // Callback function for the VRF request
    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)
        external
    {
        emit RandomNumberDelivered(requestId, _smartc, account, randomWords);
        try
            CallbackInterface(_smartc).fulfillRandomness(account, randomWords)
        {} catch Error(string memory reason) {
            emit ErrorFromVrfCallback(reason, requestId, _smartc, account);
        } catch (bytes memory reason) {
            emit ErrorNotHandled(reason, requestId, _smartc, account);
        }
    }
}
